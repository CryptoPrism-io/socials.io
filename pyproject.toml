# Socials.io Project Configuration
# Modern Python project configuration with tool integrations

[project]
name = "socials-io"
version = "1.8.1"
description = "Social media automation platform for crypto content generation"
authors = [
    {name = "Crypto Prism Team", email = "info@cryptoprism.io"},
]
readme = "README.md"
requires-python = ">=3.10,<3.13"
license = {text = "MIT"}
keywords = ["social-media", "crypto", "automation", "instagram", "content-generation"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core AI and API
    "together>=4.1",
    "requests~=2.31",
    "psycopg2-binary~=2.9",
    "python-dotenv~=1.0",

    # Data processing
    "pandas~=2.1",
    "sqlalchemy~=2.0",
    "jinja2~=3.1",
    "asyncio",
    "nest-asyncio",

    # Image processing
    "pillow~=10.1",

    # HTTP client for API retry utilities
    "aiohttp~=3.9",

    # API clients (Google/Instagram)
    "gspread~=5.11",
    "oauth2client~=4.1",
    "google-api-python-client~=2.111",
    "google-auth~=2.23",
    "google-auth-oauthlib~=1.2",
    "google-auth-httplib2~=0.1",
    "instagrapi~=2.1",

    # Web automation
    "playwright~=1.41",

    # Optional visualization
    "numpy~=1.26",
    "matplotlib~=3.8",
    "seaborn~=0.13",
]

[project.optional-dependencies]
dev = [
    # Testing frameworks
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.23.0",
    "unittest-xml-reporting>=4.0.0",

    # Code quality and linting
    "flake8>=7.0.0",
    "pylint>=3.0.0",
    "black>=24.0.0",
    "isort>=5.12.0",

    # Security scanning
    "bandit>=1.7.0",

    # Type checking
    "mypy>=1.8.0",

    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",

    # Development utilities
    "pre-commit>=3.6.0",
]

[project.urls]
Homepage = "https://github.com/cryptoprism/socials.io"
Documentation = "https://docs.cryptoprism.io"
Repository = "https://github.com/cryptoprism/socials.io"
Issues = "https://github.com/cryptoprism/socials.io/issues"
Changelog = "https://github.com/cryptoprism/socials.io/blob/main/CHANGELOG.md"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# Tool configurations
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

# Module-specific settings
[[tool.mypy.overrides]]
module = [
    "src.retry_utils",
    "src.config",
]
strict_optional = false  # Allow optional typing for retry logic

[[tool.mypy.overrides]]
module = [
    "config.paths",  # Legacy import compatibility
]
ignore_errors = true  # Allow legacy code to type gradually

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will match only files and directories
# at the root of the project.
^/build/        # directories; note leading slash
|^/dist/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["config", "logging_config", "retry_utils"]
skip = ["venv", ".venv", "build", "dist"]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "--verbose",
    "--tb=short",
    "--cov=src",
    "--cov-report=xml",
    "--cov-report=term",
    "--cov-fail-under=80",
]
asyncio_mode = "auto"
python_classes = ["Test*", "*Suite"]
python_functions = ["test_*"]
python_modules = ["test*", "*_test"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
    "retry: Tests that involve retry logic",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "tests/*",
    "setup.py",
    "config.py",  # Legacy file
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
tests = ["B201", "B301"]  # Detect use of pickle and hashlib usage

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101", "E501"]  # Assert false, assert used, line too long