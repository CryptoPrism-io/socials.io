name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev_ai_code_branch ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONIOENCODING: utf-8
    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run structure validation tests
      run: |
        python tests/test_path_structure.py
        python tests/test_restructure.py

    - name: Run unit tests with pytest
      run: |
        pytest tests/ -v --tb=short --cov=src --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Run flake8 linting
      run: |
        flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503 --statistics

    - name: Run black code formatting check
      run: |
        black --check --diff src/ tests/

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff src/ tests/

    - name: Run mypy type checking
      run: |
        mypy src/ --config-file mypy.ini

  security:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-

    - name: Install security scanning dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Upload bandit report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

    - name: Run safety dependency check
      run: |
        safety check --json --output safety-report.json || true

    - name: Upload safety report
      uses: actions/upload-artifact@v3
      with:
        name: safety-dependency-report
        path: safety-report.json

  build-validation:
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium

    - name: Validate environment setup
      run: |
        python scripts/validate_env.py || echo "Environment validation completed with warnings"

    - name: Run integration tests
      run: |
        python tests/test_restructure.py

    - name: Test Playwright functionality
      run: |
        python -c "
        import asyncio
        from playwright.async_api import async_playwright

        async def test_playwright():
            async with async_playwright() as p:
                browser = await p.chromium.launch()
                page = await browser.new_page()
                await page.goto('data:text/html,<h1>Test</h1>')
                await browser.close()
                print('âœ“ Playwright test successful')

        asyncio.run(test_playwright())
        "

    - name: Generate HTML and images
      run: |
        python src/scripts/instapost_main.py

    - name: Success notification
      run: |
        echo "ðŸŽ‰ All CI/CD pipeline checks passed!"
        echo "âœ… Tests: Passed"
        echo "âœ… Linting: Passed"
        echo "âœ… Security: Passed"
        echo "âœ… Build Validation: Passed"